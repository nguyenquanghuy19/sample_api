// Mocks generated by Mockito 5.3.2 from annotations
// in elearning/test/forum_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:elearning/core/data/models/forum_model.dart' as _i6;
import 'package:elearning/core/data/remote/configs/mock_api.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

import 'core/data/remote/services/base_service.dart' as _i2;
import 'core/data/remote/services/forum_test_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseService_0 extends _i1.SmartFake implements _i2.BaseService {
  _FakeBaseService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMockAPIHelpers_1 extends _i1.SmartFake
    implements _i3.MockAPIHelpers {
  _FakeMockAPIHelpers_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ForumService].
///
/// See the documentation for Mockito's code generation for more information.
class MockForumService extends _i1.Mock implements _i4.ForumService {
  MockForumService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseService get baseService => (super.noSuchMethod(
        Invocation.getter(#baseService),
        returnValue: _FakeBaseService_0(
          this,
          Invocation.getter(#baseService),
        ),
      ) as _i2.BaseService);
  @override
  set baseService(_i2.BaseService? _baseService) => super.noSuchMethod(
        Invocation.setter(
          #baseService,
          _baseService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.MockAPIHelpers get mockAPIHelpers => (super.noSuchMethod(
        Invocation.getter(#mockAPIHelpers),
        returnValue: _FakeMockAPIHelpers_1(
          this,
          Invocation.getter(#mockAPIHelpers),
        ),
      ) as _i3.MockAPIHelpers);
  @override
  _i5.Future<_i6.ForumModel?> getTopics() => (super.noSuchMethod(
        Invocation.method(
          #getTopics,
          [],
        ),
        returnValue: _i5.Future<_i6.ForumModel?>.value(),
      ) as _i5.Future<_i6.ForumModel?>);
  @override
  _i5.Future<_i6.ForumModel?> getAllCourseOfTopic(String? slug) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCourseOfTopic,
          [slug],
        ),
        returnValue: _i5.Future<_i6.ForumModel?>.value(),
      ) as _i5.Future<_i6.ForumModel?>);
  @override
  _i5.Future<_i6.ResponseDataPostModel?> getListPost(
    String? slug,
    String? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListPost,
          [
            slug,
            param,
          ],
        ),
        returnValue: _i5.Future<_i6.ResponseDataPostModel?>.value(),
      ) as _i5.Future<_i6.ResponseDataPostModel?>);
  @override
  _i5.Future<_i6.ForumResponseModel?> getForumSlug(String? slug) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForumSlug,
          [slug],
        ),
        returnValue: _i5.Future<_i6.ForumResponseModel?>.value(),
      ) as _i5.Future<_i6.ForumResponseModel?>);
  @override
  _i5.Future<_i6.CommentModel?> getCommentsBySlug(
    String? slug,
    String? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentsBySlug,
          [
            slug,
            param,
          ],
        ),
        returnValue: _i5.Future<_i6.CommentModel?>.value(),
      ) as _i5.Future<_i6.CommentModel?>);
  @override
  _i5.Future<_i6.ForumLikesResponseModel?> postLikeForumComment(
    String? type,
    int? idPost,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postLikeForumComment,
          [
            type,
            idPost,
          ],
        ),
        returnValue: _i5.Future<_i6.ForumLikesResponseModel?>.value(),
      ) as _i5.Future<_i6.ForumLikesResponseModel?>);
  @override
  _i5.Future<T?> post<T>(
    String? url, {
    Object? body,
    String? param,
    required T Function(Object?)? mapper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #body: body,
            #param: param,
            #mapper: mapper,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);
  @override
  _i5.Future<T?> put<T>(
    String? url, {
    Object? body,
    String? param,
    required T Function(Object?)? mapper,
    bool? needAccessToken = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #body: body,
            #param: param,
            #mapper: mapper,
            #needAccessToken: needAccessToken,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);
  @override
  _i5.Future<T?> delete<T>(
    String? url, {
    Object? body,
    String? param,
    required T Function(Object?)? mapper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #body: body,
            #param: param,
            #mapper: mapper,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);
  @override
  _i5.Future<T?> get<T>(
    String? url, {
    String? param,
    required T Function(Object?)? mapper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #param: param,
            #mapper: mapper,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);
  @override
  _i5.Future<T?> patch<T>(
    String? url, {
    Object? body,
    String? param,
    required T Function(Object?)? mapper,
    bool? needAccessToken = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #body: body,
            #param: param,
            #mapper: mapper,
            #needAccessToken: needAccessToken,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);
}
