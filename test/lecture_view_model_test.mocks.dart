// Mocks generated by Mockito 5.3.2 from annotations
// in elearning/test/lecture_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:elearning/core/data/models/forum_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

import 'core/data/remote/services/forum_test_service.dart' as _i2;
import 'core/data/repositories/forum_repository_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeForumService_0 extends _i1.SmartFake implements _i2.ForumService {
  _FakeForumService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ForumRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockForumRepository extends _i1.Mock implements _i3.ForumRepository {
  MockForumRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ForumService get forumService => (super.noSuchMethod(
        Invocation.getter(#forumService),
        returnValue: _FakeForumService_0(
          this,
          Invocation.getter(#forumService),
        ),
      ) as _i2.ForumService);
  @override
  _i4.Future<_i5.ForumLikesResponseModel?> postLikeForumComment(
    String? type,
    int? idPost,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postLikeForumComment,
          [
            type,
            idPost,
          ],
        ),
        returnValue: _i4.Future<_i5.ForumLikesResponseModel?>.value(),
      ) as _i4.Future<_i5.ForumLikesResponseModel?>);
  @override
  _i4.Future<_i5.ForumResponseModel?> getAllListCourses(String? slug) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllListCourses,
          [slug],
        ),
        returnValue: _i4.Future<_i5.ForumResponseModel?>.value(),
      ) as _i4.Future<_i5.ForumResponseModel?>);
  @override
  _i4.Future<_i5.CommentModel?> getCommentsBySlug(
    String? slug,
    String? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentsBySlug,
          [
            slug,
            param,
          ],
        ),
        returnValue: _i4.Future<_i5.CommentModel?>.value(),
      ) as _i4.Future<_i5.CommentModel?>);
  @override
  _i4.Future<_i5.ForumModel?> getTopics() => (super.noSuchMethod(
        Invocation.method(
          #getTopics,
          [],
        ),
        returnValue: _i4.Future<_i5.ForumModel?>.value(),
      ) as _i4.Future<_i5.ForumModel?>);
  @override
  _i4.Future<_i5.ForumModel?> getAllCourseOfTopic(String? slug) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCourseOfTopic,
          [slug],
        ),
        returnValue: _i4.Future<_i5.ForumModel?>.value(),
      ) as _i4.Future<_i5.ForumModel?>);
  @override
  _i4.Future<_i5.ResponseDataPostModel?> getListPost(
    String? slug,
    String? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListPost,
          [
            slug,
            param,
          ],
        ),
        returnValue: _i4.Future<_i5.ResponseDataPostModel?>.value(),
      ) as _i4.Future<_i5.ResponseDataPostModel?>);
}
